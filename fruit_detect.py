# -*- coding: utf-8 -*-
"""Fruit detect

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k3jBwpY8J1Sk1BzG-ZVvi-VgzTXUm3fm
"""

from keras.utils.np_utils         import to_categorical
from tensorflow.keras.optimizers  import RMSprop
from keras.layers                 import Dense, Activation, BatchNormalization, Dropout
from keras.models                 import Sequential
from keras.preprocessing.image    import load_img
from keras.preprocessing.image    import img_to_array
from keras.models                 import load_model
from keras.utils                  import np_utils

import matplotlib.pyplot as plt
import glob
import cv2
import numpy as np

x_train = []
x_test = []
y_train = []
y_test = []

for train in glob.glob("/content/drive/MyDrive/AI/fruit/train/*.jpg"):
  a = cv2.imread(train)
  x_train.append(a)

  train1 = 'apple'
  train2 = 'banana'
  train3 = 'corn'
  train4 = 'kiwi'
  train5 = 'leamon'
  train6 = 'mango'
  train7 = 'onion'
  train8 = 'pear'
  train9 = 'plum'
  train10 = 'potato'

  if train1 in train:
    y_train.append([0])
  elif train2 in train:
    y_train.append([1])
  elif train3 in train:
    y_train.append([2])
  elif train4 in train:
    y_train.append([3])
  elif train5 in train:
    y_train.append([4])
  elif train6 in train:
    y_train.append([5])
  elif train7 in train:
    y_train.append([6])
  elif train8 in train:
    y_train.append([7])
  elif train9 in train:
    y_train.append([8])
  elif train10 in train:
    y_train.append([9])

x_train = np.array(x_train)
y_train = np.array(y_train)

for test in glob.glob("/content/drive/MyDrive/AI/fruit/validation/*.jpg"):
  b = cv2.imread(test)
  x_test.append(b)

  train1 = 'apple'
  train2 = 'banana'
  train3 = 'corn'
  train4 = 'kiwi'
  train5 = 'leamon'
  train6 = 'mango'
  train7 = 'onion'
  train8 = 'pear'
  train9 = 'plum'
  train10 = 'potato'

  if train1 in train:
    y_test.append([0])
  elif train2 in train:
    y_test.append([1])
  elif train3 in train:
    y_test.append([2])
  elif train4 in train:
    y_test.append([3])
  elif train5 in train:
    y_test.append([4])
  elif train6 in train:
    y_test.append([5])
  elif train7 in train:
    y_test.append([6])
  elif train8 in train:
    y_test.append([7])
  elif train9 in train:
    y_test.append([8])
  elif train10 in train:
    y_test.append([9])

x_test = np.array(x_test)
y_test = np.array(y_test)

print(x_train.shape)
print(y_train.shape)
print(y_test.shape)
print(x_test.shape)

x_test = np.array(x_test)
y_test = np.array(y_test)

x_train = x_train.reshape(299,100,100,3)
x_test = x_test.reshape(80,100,100,3)

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')

x_train /= 255
x_test /= 255

y_train = np_utils.to_categorical(y_train,10)
y_test = np_utils.to_categorical(y_test, 10)

#Creating the model
from keras.layers                 import Conv2D
from keras.layers                 import MaxPooling2D
from keras.layers                 import Flatten

model = Sequential()
model.add(Conv2D(32,(3,3),input_shape = (100,100,3)))
model.add(Activation("relu"))
model.add(MaxPooling2D())
model.add(Conv2D(32,(3,3)))
model.add(Activation("relu"))
model.add(MaxPooling2D())
model.add(Conv2D(64,(3,3)))
model.add(Activation("relu"))
model.add(MaxPooling2D())
model.add(Flatten())
model.add(Dense(1024))
model.add(Activation("relu"))
model.add(Dropout(0.5))
model.add(Dense(10, activation='softmax')) 

#Getting model's summary
model.summary()

model = Sequential()
model.add(Dense(512, kernel_initializer='normal', activation='relu', input_shape=(30000,)))
model.add(Dropout(0.2))
model.add(Dense(512, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(10, activation='softmax')) 
model.summary()

#Biên dịch
model.compile(loss='categorical_crossentropy',
              optimizer=RMSprop(),
              metrics=['accuracy'])

#Training
history = model.fit(x_train, y_train, 
                    batch_size=32, 
                    epochs=200, 
                    verbose=1, 
                    validation_data=(x_test, y_test))
# Save model
model.save('Nhandangtraicay.h5')

#Vẽ đồ thị
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epach')
plt.legend(['Train','Validation'],loc='upper left')
plt.show

#Kiểm tra chương trình dữ liệu
score = model.evaluate(x_test, y_test, verbose = 0)
print('Test loss:',score[0])
print('Test accuracy', score[1])